<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup Label="GeneralProperties">
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <RuntimeIdentifiers>osx-x64;osx-arm64</RuntimeIdentifiers>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <RollForward>Major</RollForward>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <PropertyGroup Label="ArcadeConfiguration">
    <IsShipping>true</IsShipping>
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>

  <PropertyGroup Label="Nuget Package">
    <IsPackable>true</IsPackable>
    <PackageId>dotnet-xcsync</PackageId>
    <Title>xcsync</Title>
    <Description>xcsync is a tool that enables developers to leverage Xcode for managing Apple specific files with .NET projects.</Description>
    <Authors>Microsoft</Authors>
    <Owners>Microsoft</Owners>
    <Company>Microsoft</Company>
    <Copyright>Microsoft Corporation</Copyright>
    <PackageIcon>icon.png</PackageIcon>
    <PackageReadmeFile>docs/README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageThirdPartyNoticesFile>docs/NOTICE.txt</PackageThirdPartyNoticesFile>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <EnablePackageValidation>true</EnablePackageValidation>
  </PropertyGroup>

  <PropertyGroup Label=".Net Tool">
    <PackAsTool>true</PackAsTool>
    <ToolCommandName>xcsync</ToolCommandName>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="PACKAGE.md" Link="docs/README.md" Pack="true" PackagePath="/docs/README.md" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="$(XcsyncRootDirectory)NOTICE.txt" Pack="true" PackagePath="docs/NOTICE.txt" Visible="false" Link="docs/NOTICE.txt" />
  </ItemGroup>

  <PropertyGroup>
    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>
    <T4GeneratedFilesOutputPath>$(BaseIntermediateOutputPath)generated/t4</T4GeneratedFilesOutputPath>
    <LatestFrameworksDownloadOutputPath>$(BaseIntermediateOutputPath)downloaded</LatestFrameworksDownloadOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <XAMARIN_MACIOS_HASH>e76b7b8de65863f39a6a7353abc07ebf32c442a2</XAMARIN_MACIOS_HASH>
  </PropertyGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="xcsync.tests" />
    <InternalsVisibleTo Include="xcsync.e2e.tests" />
    <InternalsVisibleTo Include="DynamicProxyGenAssembly2" /> <!-- Needed for Moq -->
  </ItemGroup>

  <ItemGroup>
    <!-- Per https://learn.microsoft.com/en-us/visualstudio/msbuild/find-and-use-msbuild-versions?view=vs-2022,
        need to ensure the build output is clean and doesn't include any MSBuild assemblies.
        To prevent issues like:
        System.InvalidOperationException : Microsoft.Build.Locator.MSBuildLocator.RegisterInstance was called, 
        but MSBuild assemblies were already loaded. Ensure that RegisterInstance is called before any method 
        that directly references types in the Microsoft.Build namespace has been called. This dependency arises 
        from when a method is just-in-time compiled, so it breaks even if the reference to a Microsoft.Build type 
        has not been executed.-->
    <PackageReference Include="Marille" />
    <PackageReference Include="Microsoft.Build" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.Build.Locator" />
    <PackageReference Include="Microsoft.CodeAnalysis" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" />
    <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" />
    <PackageReference Include="System.Text.Json" Version="8.0.5" />
    <PackageReference Include="System.Formats.Asn1" Version="9.0.2" />
    <PackageReference Include="Microsoft.Extensions.Logging" />    
    <PackageReference Include="Serilog" />
    <PackageReference Include="Serilog.Enrichers.Thread" />
    <PackageReference Include="Serilog.Expressions" />
    <PackageReference Include="Serilog.Sinks.Console" />
    <PackageReference Include="Serilog.Sinks.Debug" />
    <PackageReference Include="System.CommandLine" />
    <PackageReference Include="TestableIO.System.IO.Abstractions" />
    <PackageReference Include="TestableIO.System.IO.Abstractions.Wrappers" />
    <PackageReference Include="TestableIO.System.IO.Abstractions.Analyzers" >
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="NuGet.Frameworks"/>
  </ItemGroup>
  <ItemGroup Label="ClangSharp">
    <PackageReference Include="clangsharp" />
    <PackageReference Include="libClang.runtime.osx-arm64" />
    <PackageReference Include="libClangSharp.runtime.osx-arm64" />
    <PackageReference Include="libClang.runtime.osx-x64" />
    <PackageReference Include="libClangSharp.runtime.osx-x64" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources/Strings.resx" GenerateSource="true">
      <LastGenOutput>Strings.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Update="Resources/Strings.Designer.cs">
        <DesignTime>True</DesignTime>
        <AutoGen>True</AutoGen>
        <DependentUpon>Strings.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <TextTemplate Include="**\*.tt" />
  </ItemGroup>

  <ItemGroup>
    <DownloadFile Include="tools/common/Frameworks.cs" Repo="xamarin-macios" Hash="$(XAMARIN_MACIOS_HASH)" />
    <DownloadFile Include="tools/common/ApplePlatform.cs" Repo="xamarin-macios" Hash="$(XAMARIN_MACIOS_HASH)" />
    <DownloadFile Include="tools/common/SdkVersions.cs" Repo="xamarin-macios" Hash="$(XAMARIN_MACIOS_HASH)" />
    <DownloadFile Include="tools/common/Execution.cs" Repo="xamarin-macios" Hash="$(XAMARIN_MACIOS_HASH)" />
    <DownloadFile Include="tools/common/StringUtils.cs" Repo="xamarin-macios" Hash="$(XAMARIN_MACIOS_HASH)" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="@(TextTemplate->'$(T4GeneratedFilesOutputPath)/%(Filename).g.cs')" Visible="false" />
    <Compile Include="@(DownloadFile->'$(BaseIntermediateOutputPath)downloaded/%(Repo)/%(Identity)')">
      <Link>external/%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>

  <Target Name="TextTemplateTransform" BeforeTargets="BeforeBuild" Inputs="@(TextTemplate)" Outputs="$(T4GeneratedFilesOutputPath)/%(TextTemplate.Filename).g.cs">
    <ItemGroup>
      <T4GeneratedFiles Include="@(TextTemplate)">
        <TypeName>$(RootNamespace).$([System.String]::Copy('%(RelativeDir)').Replace('/', '.'))%(Filename)</TypeName>
        <OutputFile>$(T4GeneratedFilesOutputPath)/%(Filename).g.cs</OutputFile>
      </T4GeneratedFiles>
    </ItemGroup>
    <MakeDir Directories="$(T4GeneratedFilesOutputPath)" Condition="!Exists('$(T4GeneratedFilesOutputPath)')" />
    <Exec WorkingDirectory="$(ProjectDir)" Command="dotnet t4 %(T4GeneratedFiles.Identity) --preprocess -out %(T4GeneratedFiles.OutputFile)" />
  </Target>

  <Target Name="TextTemplateClean" AfterTargets="Clean">
    <RemoveDir Directories="$(T4GeneratedFilesOutputPath)" />
  </Target>
  
  <Target Name="GetLatestFrameworks_OSX" BeforeTargets="BeforeBuild" Inputs="@(DownloadFile)" Outputs="@(DownloadFile->'$(LatestFrameworksDownloadOutputPath)/%(Repo)/%(Identity)')" Condition="$([MSBuild]::IsOSPlatform(OSX)) Or $([MSBuild]::IsOSPlatform(Linux))">
      <Exec Command="curl --create-dirs -f -s 'https://raw.githubusercontent.com/xamarin/%(DownloadFile.Repo)/%(DownloadFile.Hash)/%(DownloadFile.Identity)' --output '$(LatestFrameworksDownloadOutputPath)/%(DownloadFile.Repo)/%(DownloadFile.Identity)'" />
  </Target>

  <Target Name="GetLatestFrameworks_Windows" BeforeTargets="BeforeBuild" Inputs="@(DownloadFile)" Outputs="@(DownloadFile->'$(LatestFrameworksDownloadOutputPath)/%(Repo)/%(Identity)')" Condition="$([MSBuild]::IsOSPlatform(Windows))">
    <!-- https://gist.github.com/fearthecowboy/9e06ad9d92c5d939582147a35c049693 -->
    <PropertyGroup><PowerShell># 2>nul || type %~df0|find /v "setlocal"|find /v "errorlevel"|powershell.exe -noninteractive -&amp; exit %errorlevel% || #</PowerShell></PropertyGroup>

    <ItemGroup>
      <DownloadFile Include="@(DownloadFile)">
        <Script>$(Powershell)
        If (!(Test-Path $(LatestFrameworksDownloadOutputPath)\%(DownloadFile.Repo)\%(DownloadFile.RelativeDir))) {
          $null = New-Item -ItemType Directory -Force -Path $(LatestFrameworksDownloadOutputPath)\%(DownloadFile.Repo)\%(DownloadFile.RelativeDir)
        }
        Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/xamarin/%(DownloadFile.Repo)/%(DownloadFile.Hash)/%(DownloadFile.Identity)' -OutFile '$(LatestFrameworksDownloadOutputPath)\%(DownloadFile.Repo)\%(DownloadFile.Identity)'
        </Script>
      </DownloadFile>
    </ItemGroup>

    <Exec Command="@(DownloadFile->'%(Script)')" EchoOff="true" />
  </Target>
  
  <Target Name="LatestFrameworksClean" AfterTargets="Clean">
    <RemoveDir Directories="$(LatestFrameworksDownloadOutputPath)" />
  </Target>

</Project>
