<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
			<xsd:element name="metadata">
				<xsd:complexType>
				<xsd:sequence>
					<xsd:element name="value" type="xsd:string" minOccurs="0" />
				</xsd:sequence>
				<xsd:attribute name="name" use="required" type="xsd:string" />
				<xsd:attribute name="type" type="xsd:string" />
				<xsd:attribute name="mimetype" type="xsd:string" />
				<xsd:attribute ref="xml:space" />
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="assembly">
				<xsd:complexType>
				<xsd:attribute name="alias" type="xsd:string" />
				<xsd:attribute name="name" type="xsd:string" />
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="data">
				<xsd:complexType>
				<xsd:sequence>
					<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
					<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
				<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
				<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
				<xsd:attribute ref="xml:space" />
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="resheader">
				<xsd:complexType>
				<xsd:sequence>
					<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" use="required" />
				</xsd:complexType>
			</xsd:element>
			</xsd:choice>
		</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="ProgramHeader" xml:space="preserve">
		<value>xcSync v{0}, (c) Microsoft Corporation. All rights reserved.
		</value>
		<comment>{0} is a numerical based string containing the version number for the command line tool</comment>
	</data>

	<!-- Options -->
	<data name="Options.Force.Description" xml:space="preserve">
		<value>Force overwrite of an existing Xcode project</value>
	</data>

	<data name="Options.Project.Description" xml:space="preserve">
		<value>Path to the source .NET .csproj</value>
	</data>

	<data name="Options.Target.Description" xml:space="preserve">
		<value>Path to the target Xcode project</value>
	</data>

	<data name="Options.Open.Description" xml:space="preserve">
		<value>Open the generated project in Xcode</value>
	</data>

	<data name="Options.Tfm.Description" xml:space="preserve">
		<value>Specify the target framework moniker</value>
	</data>

	<data name="Options.Verbosity.Description" xml:space="preserve">
		<value>Set the verbosity level</value>
	</data>

	<data name="Options.DotnetPath.Description" xml:space="preserve">
		<value>Set the path to the .NET SDK, when not provided will use the path from the parent process if it is 'dotnet' otherwise falls back to the 'dotnet' on the PATH.</value>
	</data>

	<!-- Commands -->
	<data name="Commands.Generate.Description" xml:space="preserve">
		<value>generate a Xcode project at the path specified by --target from the project identified by --project</value>
	</data>
	<data name="Commands.Sync.Description" xml:space="preserve">
		<value>used after the generate command to synchronize changes from the generated Xcode project back to the .NET project</value>
	</data>
	<data name="Commands.Watch.Description" xml:space="preserve">
		<value>generates a Xcode project, then continuously synchronizes changes between the Xcode project and the .NET project</value>
	</data>

	<!-- Errors -->
	<data name="Errors.InvalidOption" xml:space="preserve">
		<value>Invalid option '{0}' provided: {1}</value>
		<comment>{0} is name of the command line options, {1} is the value of the option provided by the user</comment>
	</data>
	<data name="Errors.PbxprojNotFound" xml:space="preserve">
		<value>Could not find a project.pbxproj file in path '{0}'</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.CsprojNotFound" xml:space="preserve">
		<value>Could not find a .csproj file in path '{0}'</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.MultipleProjectFilesFound" xml:space="preserve">
		<value>Multiple .csproj files found in '{0}', please specify which project file to use via the [--project, -p] option: {1}</value>
	</data>
	<data name="Errors.Validation.PathNameIsEmpty" xml:space="preserve">
		<value>Path name is empty</value>
	</data>
	<data name="Errors.Validation.PathDoesNotExist" xml:space="preserve">
		<value>Path '{0}' does not exist</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.TargetIsNotEmpty" xml:space="preserve">
		<value>The target path '{0}' already exists and is not empty. Use [--force, -f] to overwrite the existing project.</value>
		<comment>{0} is the path to the directory</comment>
	</data>
	<data name="Errors.Validation.TargetDoesNotExist" xml:space="preserve">
		<value>Target path '{0}' does not exist, will create directory if [--force, -f] is set.</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.TargetIsNotValidXcodeProjectFolder" xml:space="preserve">
		<value>Target path '{0}' does not exist, or is not a valid Xcode project folder.</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.PathDoesNotContainCsproj" xml:space="preserve">
		<value>'{0}' is not a valid path to a .NET project or a directory.</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.MissingValidTargetFrameworkInPath" xml:space="preserve">
		<value>Missing valid target framework in '{0}'.</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.InvalidTargetFramework" xml:space="preserve">
		<value>Invalid TFM: Target framework '{0}' does not target an Apple platform</value>
		<comment>{0} is name of the target frameworks, e.g net8-ios, net8-windows</comment>
	</data>
    <data name="Errors.Validation.InvalidVerbosity" xml:space="preserve">
		<value>Invalid Verbosity. Allowed values are: Quiet, Minimal, Normal, Detailed, Diagnostic.</value>
	</data>
    <data name="Errors.Validation.InvalidOS" xml:space="preserve">
		<value>The xcsync tool can only be run on macOS.</value>
	</data>	
	<data name="Errors.MultipleTfmsFound" xml:space="preserve">
		<value>Multiple target frameworks found in the project file. Specify which target framework to use with the [--target-framework, -tfm] option.</value>
	</data>
	<data name="Errors.TfmNotSupported" xml:space="preserve">
		<value>Target framework is not supported by current .NET project.</value>
	</data>
	<data name="Errors.TargetPlatformNotFound" xml:space="preserve">
		<value>Target platform not found</value>
	</data>

	<!-- Base Command Messages -->
	<data name="Base.SearchForProjectFiles" xml:space="preserve">
		<value>'{0}' is not a .csproj file, searching for .csproj files in directory</value>
		<comment>{0} is the path to the directory</comment>
	</data>
	<data name="Base.FoundProjectFile" xml:space="preserve">
		<value>Found .csproj file '{0}' in path '{1}'</value>
		<comment>{0} is the path to the directory</comment>
	</data>
	<data name="Base.ProjectTfms" xml:space="preserve">
		<value>Project target frameworks: '{0}'</value>
		<comment>{0} is list of TFMs the selected project supports</comment>
	</data>
	<data name="Base.UseDefaultTfm" xml:space="preserve">
		<value>No target framework moniker specified, using the first one found in the project.</value>
	</data>
	<data name="Base.EstablishDefaultTarget" xml:space="preserve">
		<value>Target path is the default location or empty, prefixing with '{0}'</value>
		<comment>{0} is the path to project</comment>
	</data>
	<data name="Base.CreateDefaultTarget" xml:space="preserve">
		<value>Target path '{0}' does not exist, but is the default location, creating.</value>
		<comment>{0} is the path to target project</comment>
	</data>
	<data name="Base.DotnetPath" xml:space="preserve">
		<value>Using the `dotnet` located at {0}.</value>
		<comment>{0} is the path to dotnet</comment>
	</data>
	<data name="Base.XcodePath" xml:space="preserve">
		<value>Using Xcode from {0}.</value>
		<comment>{0} is the path to Xcode</comment>
	</data>

	<!-- Generate Messages -->
	<data name="Generate.HeaderInformation" xml:space="preserve">
		<value>Generating files from project '{0}' to target '{1}'</value>
		<comment>{0} is the path to the project file, {1} is the path to the target project</comment>
	</data>
	<data name="Generate.GeneratedFiles" xml:space="preserve">
		<value>Generated Xcode header and implementation files</value>
	</data>
	<data name="Generate.GeneratedProject" xml:space="preserve">
		<value>Generated Xcode project at '{0}'</value>
		<comment>{0} is the path to the generated Xcode project</comment>
	</data>
	<data name="Generate.OpenProject" xml:space="preserve">
		<value>'{0}' is open in Xcode</value>
		<comment>{0} is the path to the opened project</comment>
	</data>

	<!-- Sync Messages -->
	<data name="Sync.HeaderInformation" xml:space="preserve">
		<value>Syncing files from project '{0}' to target '{1}'</value>
		<comment>{0} is the path to the project file, {1} is the path to the target project</comment>
	</data>

	<!-- Watch Messages -->
	<data name="Watch.HeaderInformation" xml:space="preserve">
		<value>Continuously syncing files between '{0}' and '{1}' for '{2}' platform.</value>
		<comment>{0} is the path to the project file, {1} is the path to the target project, {2} is the target platform moniker</comment>
	</data>
	<data name="Watch.ReceivedCtrlC" xml:space="preserve">
		<value>Received CTRL-C, exiting.</value>
	</data>
	<data name="Watch.ReceivedEsc" xml:space="preserve">
		<value>Received ESC, exiting.</value>
	</data>
	<data name="Watch.StopSynchronization" xml:space="preserve">
		<value>Stopping synchronization and completing remaining jobs.</value>
	</data>
	<data name="Watch.InputRedirectedInstructions" xml:space="preserve">
		<value>&gt;&gt;&gt; Input is redirected, waiting for SIGINT &lt;&lt;&lt;</value>
	</data>
	<data name="Watch.InteractiveInstructions" xml:space="preserve">
		<value>Press Ctrl+C or ESC to stop.</value>
	</data>	
	<data name="Watch.StartMonitoringProject" xml:space="preserve">
		<value>Monitoring project file changes in {0} started.</value>
		<comment>{0} is the path to the project file</comment>
	</data>
	<data name="Watch.StopMonitoringProject" xml:space="preserve">
		<value>Monitoring project file changes in {0} stopped.</value>
		<comment>{0} is the path to the project file</comment>
	</data>
	<data name="Watch.FileChangeFilter" xml:space="preserve">
		<value>Filtering file changes to files that match {0}.</value>
		<comment>{0} is a regex string used to filter files.</comment>
	</data>
	<data name="Watch.FileChangeDetected" xml:space="preserve">
		<value>Changes detected for {0} in {1} project.</value>
		<comment>{0} is the path to the file that changed, {1} is the name of the project</comment>
	</data>
	<data name="Watch.FileRenameDetected" xml:space="preserve">
		<value>File renamed from {0} to {1} in {2} project.</value>
		<comment>{0} and {1} are the old and new paths to the file that was renamed, {2} is the name of the project</comment>
	</data>
	<data name="Watch.ErrorMonitoringProjectFiles" xml:space="preserve">
		<value>An error occurred while monitoring file changes in {0}.</value>
		<comment>{0} is the path to the project folder</comment>
	</data>
	<data name="Watch.PausingMonitoring" xml:space="preserve">
		<value>Pausing monitoring</value>
	</data>
	<data name="Watch.Syncing" xml:space="preserve">
		<value>Syncing change context</value>
	</data>
	<data name="Watch.ResumingMonitoring" xml:space="preserve">
		<value>Context synced. Resuming monitoring</value>
	</data>
	<data name="Watch.WorkerException" xml:space="preserve">
		<value>Error processing change message {0}: {1}. Please file a bug report here: https://aka.ms/xcsync-issue</value>
		<comment>{0} is the message Id, {1} is the exception message</comment>
	</data>
	<data name="Watch.StopWatchProcess" xml:space="preserve">
		<value>User has requested to stop the sync process. Changes will no longer be processed.</value>
	</data>

    <!-- Type Service Messages -->
    <data name="TypeService.DuplicateType" xml:space="preserve">
        <value>Type '{0}' already exists in project.</value>
        <comment>{0} is the name of the type</comment>
    </data>
    <data name="TypeService.MappingMismatch" xml:space="preserve">
        <value>Mismatch when attempting to update mapping of '{0}' to '{1}' with '{2}' to '{3}'.</value>
        <comment>{0}, {1}, {2}, {3} are names of types</comment>
    </data>
    <data name="TypeService.MappingNotFound" xml:space="preserve">
        <value>Mapping from of '{0}' to '{1}' already exists.</value>
        <comment>{0}, {1} are names of types</comment>
    </data>
    <data name="TypeService.MappingUpdateFailed" xml:space="preserve">
        <value>Failed to updated mapping of '{0}' to '{1}'.</value>
        <comment>{0}, {1} are names of types</comment>
    </data>
    <data name="TypeService.MissingAssemblyName" xml:space="preserve">
        <value>The compilation does not have an AssemblyName, possibly because it is dynamic, and unsupported.</value>
    </data>
    <data name="TypeService.DuplicateCompilation" xml:space="preserve">
        <value>The compilation for {0} has already been added, ignoring this instance.</value>
        <comment>{0} is the name of the assembly</comment>
    </data>	
    <data name="TypeService.TypeNotFound" xml:space="preserve">
        <value>The {0} type could not be located for synchronization.</value>
        <comment>{0} is the name of the type</comment>
    </data>
    <data name="TypeService.CompilationNotFound" xml:space="preserve">
        <value>The compilation for {0} could not be located for synchronization.</value>
        <comment>{0} is the name of the assembly</comment>
    </data>
    <data name="TypeService.SyntaxRootNotFound" xml:space="preserve">
        <value>The {0} type could not be synchronized due to missing symbol information.</value>
        <comment>{0} is the name of the type</comment>
    </data>
    <data name="TypeService.CompilationErrorsFound" xml:space="preserve">
        <value>{0}: Compilation errors found</value>
        <comment>{0} is the name of the Assembly</comment>
    </data>
    <data name="TypeService.AssemblyDiagnosticError" xml:space="preserve">
        <value>{0}: {1}</value>
        <comment>{0} is the name of the Assembly, {1} is the Diganostic</comment>
    </data>
    <data name="TypeService.AssemblyUpdateError" xml:space="preserve">
        <value>{0}: Failed to cache new compilation within type system, changes are not preserved.</value>
        <comment>{0} is the name of the Assembly</comment>
    </data>

    <!-- .NET Project Messages -->
	<data name="ClrProject.NotSupportedException" xml:space="preserve">
        <value>Compilation not supported for current project  '{0}'</value>
        <comment>{0} is the path to the .NET project</comment>
	</data>
	<data name="ClrProject.InvalidOperationException" xml:space="preserve">
        <value>Compilation errors detected in project '{0}': {1}}</value>
        <comment>{0} is the path to the .NET project, {1} is the list of error messages</comment>
	</data>
	<data name="ClrProject.CompilationError" xml:space="preserve">
        <value>Compilation error in project '{0}' : {1}</value>
        <comment>{0} is the path to the .NET project, {1} is the error message</comment>
	</data>
	<data name="ClrProject.InvalidOperationError" xml:space="preserve">
        <value>Invalid operation while processing project '{0}' : {1}</value>
        <comment>{0} is the path to the .NET project, {1} is the error message</comment>
	</data>
	<data name="ClrProject.UnexpectedError" xml:space="preserve">
        <value>Unexpected error occurred while processing project '{0}' : {1}</value>
        <comment>{0} is the path to the .NET project, {1} is the error message</comment>
	</data>

    <!-- Xcode Workspace Messages -->
	<data name="XcodeWorkspace.XcodeProjectNotFound" xml:space="preserve">
        <value>File not found: {0}</value>
        <comment>{0} is the path to the Xcode project</comment>
	</data>
    <data name="XcodeWorkspace.FailToLoadXcodeProject" xml:space="preserve">
        <value>Failed to load the Xcode project file at {0}</value>
        <comment>{0} is the path to the Xcode project</comment>
    </data>
    <data name="XcodeWorkspace.XcodeProjectDoesNotContainObjects" xml:space="preserve">
        <value>The Xcode project file at {0} does not contain any objects</value>
        <comment>{0} is the path to the Xcode project</comment>
    </data>
    <data name="XcodeWorkspace.ProcessingObjCImplementation" xml:space="preserve">
        <value>Processing ObjCImplementationDecl: {0}</value>
        <comment>{0} is the ObjC Type</comment>
    </data>
    <data name="XcodeWorkspace.NoTypesFound" xml:space="preserve">
        <value>No types found for {0}</value>
        <comment>{0} is the ObjC Type</comment>
    </data>
    <data name="XcodeWorkspace.MultipleTypesFound" xml:space="preserve">
        <value>Multiple types found for {0}</value>
        <comment>{0} is the ObjC Type</comment>
    </data>
    <data name="XcodeWorkspace.UnexpectedTypesFound" xml:space="preserve">
        <value>Unexpected type found: {0}</value>
        <comment>{0} is the non-ObjC type found</comment>
    </data>
    <data name="XcodeWorkspace.ErrorUpdatingRoslynType" xml:space="preserve">
        <value>{0} : Error '{1}' : {2}\n{3}</value>
        <comment>{0} is the Function, {1} is the Type, {2} is the exception message, {3} is the stack trace</comment>
    </data>
    <data name="XcodeWorkspace.ErrorParsing" xml:space="preserve">
        <value>Error: Parsing failed for '{0}' due to '{1}'.</value>
        <comment>{0} is the file path, {1} is the Translation Unit Error</comment>
    </data>
    <data name="XcodeWorkspace.FileParsingHasDiagnostics" xml:space="preserve">
        <value>Parsing '{0}' generated diagnostic messages use Detailed logging to view them.</value>
        <comment>{0} is the file path</comment>
    </data>
    <data name="XcodeWorkspace.FileDiagnostics" xml:space="preserve">
        <value>Diagnostics for '{0}':</value>
        <comment>{0} is the file path</comment>
    </data>
    <data name="XcodeWorkspace.ErrorDiagnosticIssue" xml:space="preserve">
        <value>ERROR: {0}</value>
        <comment>{0} is the diagnostic for which there are issues</comment>
    </data>
    <data name="XcodeWorkspace.WarningDiagnosticIssue" xml:space="preserve">
        <value>WARNING: {0}</value>
        <comment>{0} is the diagnostic for which there are issues</comment>
    </data>
    <data name="XcodeWorkspace.NoteDiagnosticIssue" xml:space="preserve">
        <value>NOTE: {0}</value>
        <comment>{0} is the diagnostic for which there are issues</comment>
    </data>
    <data name="XcodeWorkspace.FatalDiagnosticIssue" xml:space="preserve">
        <value>FATAL: {0}</value>
        <comment>{0} is the diagnostic for which there are issues</comment>
    </data>
    <data name="XcodeWorkspace.SkipProcessing" xml:space="preserve">
        <value>Skipping '{0}' due to one or more errors listed above.</value>
        <comment>{0} is the file path</comment>
    </data>
    <data name="XcodeWorkspace.ProcessingFile" xml:space="preserve">
        <value>Processing '{0}'</value>
        <comment>{0} is the file path</comment>
    </data>
    <data name="XcodeWorkspace.ErrorProcessing" xml:space="preserve">
        <value>Error processing '{0}' : {1}\n{2}</value>
        <comment>{0} is the file path, {1} is the exception, {2} is the stack trace</comment>
    </data>
v    <data name="XcodeWorkspace.UsingDefaultSdkRoot" xml:space="preserve">
        <value>SDKROOT not found in any release configuration, defaulting to 'macosx'</value>
    </data>

    <!-- Sync Context Messages -->
    <data name="SyncContext.SyncComplete" xml:space="preserve">
		<value>Synchronization complete.</value>
	</data>
    <data name="SyncContext.GeneratingFiles" xml:space="preserve">
		<value>Generating Xcode project files...</value>
	</data>
    <data name="SyncContext.ProcessingType" xml:space="preserve">
		<value>Processing type {0}</value>
        <comment>{0} is the name of the type</comment>
	</data>

	<!-- ObjC Syntax Processing -->
    <data name="ObjCSyntax.ObjCImplementationDeclFound" xml:space="preserve">
		<value>Found ObjCImplementationDecl: {0}</value>
        <comment>{0} is the name of the syntax declaration</comment>
	</data>
    <data name="ObjCSyntax.Visiting" xml:space="preserve">
		<value>[{0}] Visiting {{1}}</value>
        <comment>{0} is the name of the visitor class, {1} is the declaration kind name</comment>
	</data>
    <data name="ObjCSyntax.PropertyNotImplementedException" xml:space="preserve">
		<value>Unsupported property type {}0</value>
        <comment>{0} is the name of the property type</comment>
	</data>
    <data name="ObjCSyntax.ParsingProperty" xml:space="preserve">
		<value>[{0}] Parsing property type '{0}'</value>
        <comment>{0} is the name of the visitor class, {1} is the declaration kind name</comment>
	</data>

	<!-- Workers -->
    <data name="FileWorker.WroteFile" xml:space="preserve">
		<value>Wrote {0} bytes to {1}</value>
        <comment>{0} is the number of bytes written, {1} is the path to the file</comment>
	</data>
    <data name="Worker.ProcessingException" xml:space="preserve">
		<value>Exception processing message.</value>
	</data>
    <data name="Worker.ProcessingError" xml:space="preserve">
		<value>Error processing message.</value>
	</data>
    <data name="CopyFileWorker.CopiedFile" xml:space="preserve">
		<value>Copied {0} to {1}</value>
        <comment>{0} is the source path, {1} is the destination path</comment>
	</data>

	<!-- General -->
    <data name="General.FoundMsBuild" xml:space="preserve">
		<value>Found MSBuild instance {0} at {1}</value>
        <comment>{0} is a version number, {1} is the path</comment>
	</data>
    <data name="General.RegisteredMsBuild" xml:space="preserve">
		<value>Registered MSBuild instance {0} at {1}</value>
        <comment>{0} is a version number, {1} is the path</comment>
	</data>

</root>