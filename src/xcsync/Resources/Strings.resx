<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
		<xsd:complexType>
			<xsd:choice maxOccurs="unbounded">
			<xsd:element name="metadata">
				<xsd:complexType>
				<xsd:sequence>
					<xsd:element name="value" type="xsd:string" minOccurs="0" />
				</xsd:sequence>
				<xsd:attribute name="name" use="required" type="xsd:string" />
				<xsd:attribute name="type" type="xsd:string" />
				<xsd:attribute name="mimetype" type="xsd:string" />
				<xsd:attribute ref="xml:space" />
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="assembly">
				<xsd:complexType>
				<xsd:attribute name="alias" type="xsd:string" />
				<xsd:attribute name="name" type="xsd:string" />
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="data">
				<xsd:complexType>
				<xsd:sequence>
					<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
					<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
				<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
				<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
				<xsd:attribute ref="xml:space" />
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="resheader">
				<xsd:complexType>
				<xsd:sequence>
					<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				</xsd:sequence>
				<xsd:attribute name="name" type="xsd:string" use="required" />
				</xsd:complexType>
			</xsd:element>
			</xsd:choice>
		</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="ProgramHeader" xml:space="preserve">
		<value>xcSync v{0}, (c) Microsoft Corporation. All rights reserved.
		</value>
		<comment>{0} is a numerical based string containing the version number for the command line tool</comment>
	</data>

	<!-- Options -->
	<data name="Options.Force.Description" xml:space="preserve">
		<value>Force overwrite of an existing Xcode project</value>
	</data>

	<data name="Options.Project.Description" xml:space="preserve">
		<value>Path to the source .NET .csproj</value>
	</data>

	<data name="Options.Target.Description" xml:space="preserve">
		<value>Path to the target Xcode project</value>
	</data>

	<data name="Options.Open.Description" xml:space="preserve">
		<value>Open the generated project in Xcode</value>
	</data>

	<data name="Options.Tfm.Description" xml:space="preserve">
		<value>Specify the target framework moniker</value>
	</data>

	<data name="Options.Verbosity.Description" xml:space="preserve">
		<value>Set the verbosity level</value>
	</data>

	<!-- Commands -->
	<data name="Commands.Generate.Description" xml:space="preserve">
		<value>generate a Xcode project at the path specified by --target from the project identified by --project</value>
	</data>
	<data name="Commands.Sync.Description" xml:space="preserve">
		<value>used after the generate command to synchronize changes from the generated Xcode project back to the .NET project</value>
	</data>
	<data name="Commands.Watch.Description" xml:space="preserve">
		<value>syncs changes between the .NET project and Xcode project automatically</value>
	</data>

	<!-- Errors -->
	<data name="Errors.InvalidOption" xml:space="preserve">
		<value>Invalid option '{0}' provided: {1}</value>
		<comment>{0} is name of the command line options, {1} is the value of the option provided by the user</comment>
	</data>
	<data name="Errors.CsprojNotFound" xml:space="preserve">
		<value>Could not find a .csproj file in path '{0}'</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.MultipleProjectFilesFound" xml:space="preserve">
		<value>Multiple .csproj files found in '{0}', please specify which project file to use via the [--project, -p] option: {1}</value>
	</data>
	<data name="Errors.Validation.PathNameIsEmpty" xml:space="preserve">
		<value>Path name is empty</value>
	</data>
	<data name="Errors.Validation.PathDoesNotExist" xml:space="preserve">
		<value>Path '{0}' does not exist</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.TargetIsNotEmpty" xml:space="preserve">
		<value>The target path '{0}' already exists and is not empty. Use [--force, -f] to overwrite the existing project.</value>
		<comment>{0} is the path to the directory</comment>
	</data>
	<data name="Errors.Validation.TargetDoesNotExist" xml:space="preserve">
		<value>Target path '{0}' does not exist, will create directory if [--force, -f] is set.</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.PathDoesNotContainCsproj" xml:space="preserve">
		<value>'{0}' is not a valid path to a .NET project or a directory.</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.MissingValidTargetFrameworkInPath" xml:space="preserve">
		<value>Missing valid target framework in '{0}</value>
		<comment>{0} is the path to the file or directory</comment>
	</data>
	<data name="Errors.Validation.InvalidTargetFramework" xml:space="preserve">
		<value>Invalid TFM: Target framework '{0}' does not target an Apple platform</value>
		<comment>{0} is name of the target frameworks, e.g net8-ios, net8-windows</comment>
	</data>
	<data name="Errors.MultipleTfmsFound" xml:space="preserve">
		<value>Multiple target frameworks found in the project file. Specify which target framework to use with the [--target-framework, -tfm] option.</value>
	</data>
	<data name="Errors.TfmNotSupported" xml:space="preserve">
		<value>Target framework is not supported by current .NET project.</value>
	</data>
	<data name="Errors.TargetPlatformNotFound" xml:space="preserve">
		<value>Target platform not found</value>
	</data>

	<!-- Base Command Messages -->
	<data name="Base.SearchForProjectFiles" xml:space="preserve">
		<value>'{0}' is not a .csproj file, searching for .csproj files in directory</value>
		<comment>{0} is the path to the directory</comment>
	</data>
	<data name="Base.FoundProjectFile" xml:space="preserve">
		<value>Found .csproj file '{0}' in path '{1}'</value>
		<comment>{0} is the path to the directory</comment>
	</data>
	<data name="Base.ProjectTfms" xml:space="preserve">
		<value>Project target frameworks: '{0}'</value>
		<comment>{0} is list of TFMs the selected project supports</comment>
	</data>
	<data name="Base.UseDefaultTfm" xml:space="preserve">
		<value>No target framework moniker specified, using the first one found in the project.</value>
	</data>
	<data name="Base.EstablishDefaultTarget" xml:space="preserve">
		<value>Target path is the default location or empty, prefixing with '{0}'</value>
		<comment>{0} is the path to project</comment>
	</data>
	<data name="Base.CreateDefaultTarget" xml:space="preserve">
		<value>Target path '{0}' does not exist, but is the default location, creating.</value>
		<comment>{0} is the path to target project</comment>
	</data>

	<!-- Generate Messages -->
	<data name="Generate.HeaderInformation" xml:space="preserve">
		<value>Generating files from project '{0}' to target '{1}'</value>
		<comment>{0} is the path to the project file, {1} is the path to the target project</comment>
	</data>
	<data name="Generate.GeneratedFiles" xml:space="preserve">
		<value>Generated Xcode header and implementation files</value>
	</data>
	<data name="Generate.GeneratedProject" xml:space="preserve">
		<value>Generated Xcode project at '{0}'</value>
		<comment>{0} is the path to the generated Xcode project</comment>
	</data>
	<data name="Generate.OpenProject" xml:space="preserve">
		<value>'{0}' is open in Xcode</value>
		<comment>{0} is the path to the opened project</comment>
	</data>

	<!-- Sync Messages -->
	<data name="Sync.HeaderInformation" xml:space="preserve">
		<value>Syncing files from project '{0}' to target '{1}'</value>
		<comment>{0} is the path to the project file, {1} is the path to the target project</comment>
	</data>

	<!-- Watch Messages -->
	<data name="Watch.HeaderInformation" xml:space="preserve">
		<value>Syncing changes between project '{0}' and '{1}'.</value>
		<comment>{0} is the path to the project file, {1} is the path to the target project</comment>
	</data>
	<data name="Watch.StartMonitoringProject" xml:space="preserve">
		<value>Monitoring project file changes in {0} started.</value>
		<comment>{0} is the path to the project file</comment>
	</data>
	<data name="Watch.StopMonitoringProject" xml:space="preserve">
		<value>Monitoring project file changes in {0} stopped.</value>
		<comment>{0} is the path to the project file</comment>
	</data>
	<data name="Watch.FileChangeFilter" xml:space="preserve">
		<value>Filtering file changes to files that match {0}.</value>
		<comment>{0} is a regex string used to filter files.</comment>
	</data>
	<data name="Watch.FileChangeDetected" xml:space="preserve">
		<value>Changes detected for {0} in {1} project.</value>
		<comment>{0} is the path to the file that changed, {1} is the name of the project</comment>
	</data>
	<data name="Watch.FileRenameDetected" xml:space="preserve">
		<value>File renamed from {0} to {1} in {2} project.</value>
		<comment>{0} and {1} are the old and new paths to the file that was renamed, {2} is the name of the project</comment>
	</data>
	<data name="Watch.ErrorMonitoringProjectFiles" xml:space="preserve">
		<value>An error occurred while monitoring file changes in {0}.</value>
		<comment>{0} is the path to the project folder</comment>
	</data>

    <!-- Type Service Messages -->
    <data name="TypeService.DuplicateType" xml:space="preserve">
        <value>Type '{0}' already exists in project.</value>
        <comment>{0} is the name of the type</comment>
    </data>
    <data name="TypeService.MappingMismatch" xml:space="preserve">
        <value>Mismatch when attempting to update mapping of '{0}' to '{1}' with '{2}' to '{3}'.</value>
        <comment>{0}, {1}, {2}, {3} are names of types</comment>
    </data>
    <data name="TypeService.MappingNotFound" xml:space="preserve">
        <value>Mapping from of '{0}' to '{1}' already exists.</value>
        <comment>{0}, {1} are names of types</comment>
    </data>
    <data name="TypeService.MappingUpdateFailed" xml:space="preserve">
        <value>Failed to updated mapping of '{0}' to '{1}'.</value>
        <comment>{0}, {1} are names of types</comment>
    </data>
    <data name="TypeService.MissingAssemblyName" xml:space="preserve">
        <value>The compilation does not have an AssemblyName, possibly because it is dynamic, and unsupported.</value>
    </data>
    <data name="TypeService.DuplicateCompilation" xml:space="preserve">
        <value>The compilation for {0} has already been added, ignoring this instance.</value>
        <comment>{0} is the name of the assembly</comment>
    </data>
</root>