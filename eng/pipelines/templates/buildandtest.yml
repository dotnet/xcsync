
parameters:
  - name: runAsPublic
    type: boolean
    default: false
  - name: buildScript
    type: string
  - name: buildConfig
    type: string
  - name: repoArtifactsPath
    type: string
  - name: repoLogPath
    type: string
  - name: repoTestResultsPath
    type: string
  - name: isWindows
    type: string
    default: false    
  - name: dotnetScript
    type: string
  - name: runHelixTests
    type: boolean
    default: false

steps:
  - task: ComponentGovernanceComponentDetection@0 # Necessary for creating NOTICE File: https://docs.opensource.microsoft.com/tools/cg/legal/notice/
  
  - task: notice@0
    displayName: üõ†Ô∏è Generate NOTICE file
    inputs:
      outputformat: 'text'
      outputfile: ${{ parameters.repoArtifactsPath }}/THIRD-PARTY-NOTICES.TXT
    # condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    retryCountOnTaskFailure: 3

  - task: UseDotNet@2
    inputs: 
      useGlobalJson: true

  - script: dotnet workload install macos ios maccatalyst tvos maui # Neccessary for tests

  - ${{ if ne(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -restore -build
              -configuration ${{ parameters.buildConfig }}
              /p:ArchiveTests=true
              /bl:${{ parameters.repoLogPath }}build.binlog
              $(_OfficialBuildIdArgs)
              -p:Platform=`uname -m`
      displayName: Build
  
  - ${{ if eq(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -restore -build
              -configuration ${{ parameters.buildConfig }}
              /p:ArchiveTests=true
              /bl:${{ parameters.repoLogPath }}build.binlog
              $(_OfficialBuildIdArgs)
      displayName: Build

  - ${{ if or(ne(parameters.runAsPublic, 'true'), ne(parameters.runHelixTests, 'true')) }}:
    - ${{ if ne(parameters.isWindows, 'true') }}:
      - script: mkdir ${{ parameters.repoArtifactsPath }}/devcert-scripts &&
                cd ${{ parameters.repoArtifactsPath }}/devcert-scripts &&
                wget https://raw.githubusercontent.com/BorisWilhelms/create-dotnet-devcert/main/scripts/ubuntu-create-dotnet-devcert.sh &&
                wget https://raw.githubusercontent.com/BorisWilhelms/create-dotnet-devcert/main/scripts/common.sh &&
                chmod +x ubuntu-create-dotnet-devcert.sh &&
                ./ubuntu-create-dotnet-devcert.sh
        displayName: Install devcerts

    - ${{ if eq(parameters.isWindows, 'true') }}:
      - script: dotnet dev-certs https
        displayName: Install dev-certs

    - ${{ if ne(parameters.isWindows, 'true') }}:
      - script: ${{ parameters.dotnetScript }} dotnet-coverage collect
                --settings $(Build.SourcesDirectory)/eng/CodeCoverage.config
                --output ${{ parameters.repoTestResultsPath }}/NonHelix.cobertura.xml
                "${{ parameters.buildScript }} -testnobuild -test -configuration ${{ parameters.buildConfig }} /bl:${{ parameters.repoLogPath }}tests.binlog $(_OfficialBuildIdArgs) -p:Platform=`uname -m`"
        displayName: Run non-helix tests

  - ${{ if eq(parameters.runHelixTests, 'true') }}:
    - task: CopyFiles@2
      inputs:
        Contents: '${{ parameters.repoArtifactsPath }}/helixresults/**/*.trx'
        TargetFolder: '${{ parameters.repoArtifactsPath }}/log/$(_BuildConfig)/TestResults'
        flattenFolders: true
        OverWrite: true
      displayName: Gather helix trx files
      continueOnError: true
      condition: always()

  - task: CopyFiles@2
    inputs:
      Contents: '${{ parameters.repoArtifactsPath }}/**/*.cobertura.xml'
      TargetFolder: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
      flattenFolders: true
    displayName: Gather code coverage results

  - ${{ if eq(parameters.runAsPublic, 'true') }}:
    - task: PublishPipelineArtifact@1
      displayName: Publish coverage results (cobertura.xml)
      inputs:
        targetPath: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
        artifactName: '$(Agent.JobName)_CodeCoverageResults'
        publishLocation: 'pipeline'
    - task: PublishPipelineArtifact@1
      displayName: Publish THIRD-PART-NOTICES.TXT
      inputs:
        targetPath: '${{ parameters.repoArtifactsPath }}/THIRD-PARTY-NOTICES.TXT'
        artifactName: '$(Agent.JobName)_NOTICES'
        publishLocation: 'pipeline'

  - ${{ if ne(parameters.runAsPublic, 'true') }}:
    - task: 1ES.PublishPipelineArtifact@1
      displayName: Publish code coverage results
      inputs:
        targetPath: '${{ parameters.repoArtifactsPath }}/CodeCoverage'
        artifactName: '$(Agent.JobName)_CodeCoverageResults'
        
    - task: 1ES.PublishPipelineArtifact@1
      displayName: Publish THIRD-PART-NOTICES.TXT
      inputs:
        targetPath: '${{ parameters.repoArtifactsPath }}/THIRD-PARTY-NOTICES.TXT'
        artifactName: '$(Agent.JobName)_NOTICES'

  # Run on windows, for internal pipeline, or public+non-helix-tests job
  - ${{ if and(eq(parameters.isWindows, 'true'), or(ne(parameters.runAsPublic, 'true'), ne(parameters.runHelixTests, 'true'))) }}:
    - script: ${{ parameters.buildScript }}
              -pack 
              -sign $(_SignArgs)
              -publish $(_PublishArgs)
              -configuration ${{ parameters.buildConfig }}
              /bl:${{ parameters.repoLogPath }}/pack.binlog
              /p:Restore=false /p:Build=false
              $(_OfficialBuildIdArgs)
      displayName: Pack, Sign & Publish
